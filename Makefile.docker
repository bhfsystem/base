ifeq (stop,$(firstword $(MAKECMDGOALS)))
STOP := $(wordlist 2,$(words $(MAKECMDGOALS)),$(MAKECMDGOALS))
$(eval $(STOP):;@:)
endif

ifeq (start,$(firstword $(MAKECMDGOALS)))
START := $(wordlist 2,$(words $(MAKECMDGOALS)),$(MAKECMDGOALS))
$(eval $(START):;@:)
endif

ifeq (status,$(firstword $(MAKECMDGOALS)))
STATUS := $(wordlist 2,$(words $(MAKECMDGOALS)),$(MAKECMDGOALS))
$(eval $(STATUS):;@:)
endif

SHELL = bash
CACHE = http://$(CACHE_VIP):3128
DOCKER = $(CACHE_VIP):5000

org = $(shell cat Blockfile.json | jq -r '.block.org//"imma"')
block = $(shell basename $(shell echo $(PWD)))
image = block:$(block)
container = block-$(block)

nothing:
	@true

reset-xenial:
	docker tag $(DOCKER)/block:xenial $(DOCKER)/$(image)

reset-base:
	docker tag $(DOCKER)/block:base $(DOCKER)/$(image)

reset:
	docker tag $(DOCKER)/block:ubuntu-home $(DOCKER)/$(image)

build:
	cd .d && docker build -t $(DOCKER)/$(image) --build-arg http_proxy="$(CACHE)" $(opt) .

build-nc:
	cd .d && docker build --no-cache -t $(DOCKER)/$(image) --build-arg http_proxy="$(CACHE)" $(opt) .

daemon-sshd:
	docker run -d -ti -v /vagrant:/vagrant --name $(container) -p :2222 $(DOCKER)/$(image)
	docker cp ~/.ssh/authorized_keys $(container):/home/ubuntu/.ssh/authorized_keys

commit:
	docker commit $(container) $(DOCKER)/$(image) $(opt)

publish:
	docker push $(DOCKER)/$(image)

daemon:
	$(MAKE) clean
	$(MAKE) daemon-sshd
	$(MAKE) once

once:
	ssh-keygen -R '[localhost]:$(shell docker inspect $(container) | jq -r '.[].NetworkSettings.Ports["2222/tcp"][].HostPort')'
	ssh -A -p $(shell docker inspect $(container) | jq -r '.[].NetworkSettings.Ports["2222/tcp"][].HostPort') -o StrictHostKeyChecking=no ubuntu@localhost -- true || { sleep 1; $(MAKE) once; }

home:
	$(MAKE) reset-base daemon home-setup home-deploy
	$(MAKE) image-update
	docker tag $(DOCKER)/$(image) $(DOCKER)/$(image)0

home-setup:
	echo "Host *" | ssh -A -p $(shell docker inspect $(container) | jq -r '.[].NetworkSettings.Ports["2222/tcp"][].HostPort') ubuntu@localhost -- tee .ssh/config
	echo "StrictHostKeyChecking no" | ssh -A -p $(shell docker inspect $(container) | jq -r '.[].NetworkSettings.Ports["2222/tcp"][].HostPort') ubuntu@localhost -- tee -a .ssh/config

home-deploy:
	ssh -A -p $(shell docker inspect $(container) | jq -r '.[].NetworkSettings.Ports["2222/tcp"][].HostPort') ubuntu@localhost -- env http_proxy=$(CACHE) https_proxy=$(CACHE) ssh_gateway=$(CACHE_VIP) ssh_gateway_user=$(LOGNAME) git clone $(shell git config --local remote.origin.url) home
	ssh -A -p $(shell docker inspect $(container) | jq -r '.[].NetworkSettings.Ports["2222/tcp"][].HostPort') ubuntu@localhost -- mv home/.git .
	ssh -A -p $(shell docker inspect $(container) | jq -r '.[].NetworkSettings.Ports["2222/tcp"][].HostPort') ubuntu@localhost -- rm -rf home
	ssh -A -p $(shell docker inspect $(container) | jq -r '.[].NetworkSettings.Ports["2222/tcp"][].HostPort') ubuntu@localhost -- git reset --hard
	ssh -A -p $(shell docker inspect $(container) | jq -r '.[].NetworkSettings.Ports["2222/tcp"][].HostPort') ubuntu@localhost -- env http_proxy=$(CACHE) https_proxy=$(CACHE) ssh_gateway=$(CACHE_VIP) ssh_gateway_user=$(LOGNAME) script/cibuild
	ssh -A -p $(shell docker inspect $(container) | jq -r '.[].NetworkSettings.Ports["2222/tcp"][].HostPort') ubuntu@localhost -- make cache

block:
	$(MAKE) reset daemon block-setup block-deploy

block-deploy:
	$(MAKE) image-update

block-setup:
	jq -n --arg block $(block) --arg org $(org) '{ require: [ "\($$org)/\($$block)" ], run: { "\($$block)": {} } }' | ssh -A -p $(shell docker inspect $(container) | jq -r '.[].NetworkSettings.Ports["2222/tcp"][].HostPort') ubuntu@localhost -- tee Blockfile.json.site

block-update:
	ssh -A -p $(shell docker inspect $(container) | jq -r '.[].NetworkSettings.Ports["2222/tcp"][].HostPort') ubuntu@localhost -- git pull
	ssh -A -p $(shell docker inspect $(container) | jq -r '.[].NetworkSettings.Ports["2222/tcp"][].HostPort') ubuntu@localhost -- block clone
	ssh -A -p $(shell docker inspect $(container) | jq -r '.[].NetworkSettings.Ports["2222/tcp"][].HostPort') ubuntu@localhost -- block runmany 8 "'cd \$$1 && pwd && git pull'"
	ssh -A -p $(shell docker inspect $(container) | jq -r '.[].NetworkSettings.Ports["2222/tcp"][].HostPort') ubuntu@localhost -- block clone
	ssh -A -p $(shell docker inspect $(container) | jq -r '.[].NetworkSettings.Ports["2222/tcp"][].HostPort') ubuntu@localhost -- block bootstrap
	ssh -A -p $(shell docker inspect $(container) | jq -r '.[].NetworkSettings.Ports["2222/tcp"][].HostPort') ubuntu@localhost -- make cache
	ssh -A -p $(shell docker inspect $(container) | jq -r '.[].NetworkSettings.Ports["2222/tcp"][].HostPort') ubuntu@localhost -- block compile service
	ssh -A -p $(shell docker inspect $(container) | jq -r '.[].NetworkSettings.Ports["2222/tcp"][].HostPort') ubuntu@localhost -- ln -nfs ../sv/$(block) service/

ssh:
	@ssh -t -A -p $(shell docker inspect $(container) | jq -r '.[].NetworkSettings.Ports["2222/tcp"][].HostPort') -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no ubuntu@localhost

enter:
	docker exec -ti -u ubuntu $(container) bash -il -c 'cd; exec bash -il'

clean:
	docker rm -f $(container) 2>/dev/null || true

container-status:
	@docker ps --filter 'name=$(container)'

image-update:
	$(MAKE) block-update commit build-nc publish
	$(MAKE) daemon container-status

stop:
	@docker exec $(container) sv stop ./service/$(STOP)

start:
	@docker exec $(container) sv start ./service/$(START)

status:
	@docker exec $(container) sv status ./service/$(STATUS)

