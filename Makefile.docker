org := $(shell (cat Blockfile.json 2>/dev/null || echo '{}') | jq -r '.block.org//"imma"')
block := $(shell basename $(shell cat .block-name 2>/dev/null || echo $(PWD)))
image = block:$(block)
version = $(shell git rev-parse --abbrev-ref HEAD)
ifeq (HEAD,$(version))
version = $(shell git rev-parse HEAD)
endif

ifeq (ssh,$(firstword $(MAKECMDGOALS)))
CONTAINER := $(strip $(wordlist 2,$(words $(MAKECMDGOALS)),$(MAKECMDGOALS)))
$(eval $(CONTAINER):;@:)
endif

ifeq (remote,$(firstword $(MAKECMDGOALS)))
REMOTE := $(strip $(wordlist 2,$(words $(MAKECMDGOALS)),$(MAKECMDGOALS)))
$(eval $(REMOTE):;@:)
endif

ifeq (rebuild-one,$(firstword $(MAKECMDGOALS)))
REBUILD := $(strip $(wordlist 2,$(words $(MAKECMDGOALS)),$(MAKECMDGOALS)))
$(eval $(REBUILD):;@:)
endif

REBUILD ?= $(rebuild)

ifeq (scale,$(firstword $(MAKECMDGOALS)))
SCALE := $(strip $(wordlist 2,$(words $(MAKECMDGOALS)),$(MAKECMDGOALS)))
$(eval $(SCALE):;@:)
endif

ifeq (up,$(firstword $(MAKECMDGOALS)))
SCALE := $(strip $(wordlist 2,$(words $(MAKECMDGOALS)),$(MAKECMDGOALS)))
$(eval $(SCALE):;@:)
endif

CONTAINER ?= $(block)_$(block)_1
ifeq "$(strip $(CONTAINER))" ""
CONTAINER := $(block)_$(block)_1
endif

SHELL = bash

NET_SUBNET ?= 172.28.130
NET_PREFIX ?= 172.28.131

cache_vip ?= 172.28.128.1
ssh_vip ?= 172.28.29.250

ssh_user ?= $(LOGNAME)
ssh_port ?= 2222

ssh_remote_user ?= ubuntu
ssh_remote_home ?= /home/ubuntu

service ?= $(CONTAINER)
service_ssh_port = $(shell docker inspect $(service) 2>/dev/null | jq -r '.[].NetworkSettings.Ports["$(ssh_port)/tcp"][].HostPort')
ssh_prefix ?= ssh
ssh_suffix ?= -p $(service_ssh_port) $(ssh_remote_user)@$(ssh_vip)
service_ssh_exec ?= $(ssh_prefix) -A -o BatchMode=yes -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $(ssh_suffix)

docker_compose ?= env COMPOSE_PROJECT_NAME="$(block)" BLOCK_REGISTRY=$(registry) BLOCK_SSH_PORT=$(ssh_port) NET_PREFIX=$(NET_PREFIX) NET_SUBNET=$(NET_SUBNET) docker-compose -f compose.json

env_cache = env http_proxy=$(squid) https_proxy=$(squid)

home = ubuntu

make = $(MAKE) cache=$(cache) squid=$(squid) rebuild=$(REBUILD)

hub ?= docker.nih
registry ?= docker.nih
cache ?= cache.nih
squid ?= http://$(cache):3128

ifeq (nc,$(firstword $(MAKECMDGOALS)))
cache=
squid=
endif

aws_type ?= c4.large

print-%:
	@echo '$*=$($*)'
	@echo '  origin = $(origin $*)'
	@echo '  flavor = $(flavor $*)'
	@echo '   value = $(value  $*)'

nothing:
	@true

nc:
	@true

build:
	if [[ -d .d ]]; then cd .d && docker build --no-cache -t $(registry)/$(image) --build-arg CACHE="$(cache)" $(opt) .; fi

build-nc:
	if [[ -d .d ]]; then cd .d && docker build --no-cache -t $(registry)/$(image) --build-arg CACHE= $(opt) .; fi

commit:
	docker commit $(service) $(registry)/$(image) $(opt)

publish:
	docker push $(registry)/$(image)

recycle:
	$(make) clean
	$(make) docker-run
	$(make) wait-ssh

docker-run:
	docker run -d -ti -v /data:/data -v /config:/config --name $(service) -p :$(ssh_port) --network ubuntu_default $(registry)/$(image)

wait-ssh:
	$(service_ssh_exec) -- true 2>/dev/null || { sleep 1; $(make) wait-ssh; }

compose:
	jq -n --arg registry "$(registry)" --arg block "$(block)" '{version:"2", volumes:{data:{},config:{}}, services:{"\($$block)":{volumes:["data:/data","config:/config"],ports:["$(ssh_port)"],"image":"\($$registry)/block:\($$block)","hostname":"\($$block)"}}}' > compose.json

up:
	$(docker_compose) up -d --remove-orphans $(opt) $(shell echo $(SCALE) | runmany 'test -n "$$1" && echo "--scale $$1 "' | tr '_' '=' )

down:
	$(docker_compose) stop $(opt)

destroy:
	$(docker_compose) down --remove-orphans $(opt)

ssh:
	@ssh-keygen -R '[$(ssh_vip)]:$(service_ssh_port)' 2>/dev/null >/dev/null
	ssh -t -A -o BatchMode=yes -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -p $(service_ssh_port) $(ssh_remote_user)@$(ssh_vip) || true

remote:
	$(service_ssh_exec) -- make $(REMOTE)

home-deploy:
	script/deploy $(service_ssh_exec)
	$(service_ssh_exec) -- block compile service
	$(service_ssh_exec) -- ln -nfs ../sv/sshd service/

docker_default = docker-block

aws_default = aws-block

docker:
	$(make) $(docker_default)

aws:
	cd $(BLOCK_PATH)/base/fogg && fogg exec chexec $(BLOCK_PATH)/$(block) $(make) aws-fr

aws-fr:
	env VAGRANT_CWD=$(shell pwd) BASEBOX_NAME_OVERRIDE=block:ubuntu AWS_TYPE=$(aws_type) $(make) ssh_prefix="van vagrant ssh --" ssh_suffix= $(aws_default)

docker-block:
	docker tag $(registry)/block:$(home) $(registry)/$(image)
	$(make) recycle 
	env $(make) block-setup block-bootstrap minimize image-update

aws-block:
	van recycle
	$(make) block-setup block-bootstrap minimize
	van reuse $(block)

block-setup:
	jq -n --arg block $(block) --arg org $(org) --arg version $(version) '{ require: [ "\($$org)/\($$block)@\($$version)" ], run: { "\($$block)": {}} }' | $(service_ssh_exec) -- tee Blockfile.json.site
	$(service_ssh_exec) -- block clone
	$(service_ssh_exec) -- make cache
	$(service_ssh_exec) -- cd work/$(block) \&\& home update

block-bootstrap:
	$(service_ssh_exec) -- block bootstrap $(REBUILD)
	$(make) block-finish

block-finish:
	$(service_ssh_exec) -- block compile service
	$(service_ssh_exec) -- test -d sv/$(block) \&\& ln -nfs ../sv/$(block) service/ \|\| true

minimize:
	@true

image-update:
	$(make) commit
	$(make) build
	$(make) clean

prune:
	docker ps -a | grep -v ' Up ' | tail -n +2 | awk '{print $$1}' | gxargs -r -n 1 bash -c 'docker rm -f $$1 2>/dev/null || true' ''
	docker images --filter "dangling=true" -q --no-trunc | gxargs -r docker rmi

clean:
	docker rm -f $(service) 2>/dev/null || true

reset-time:
	docker run -it --rm --privileged --pid=host debian nsenter -t 1 -m -u -n -i date -u $(shell date -u +%m%d%H%M%Y)

../$(REBUILD):
	git clone -b $(shell git rev-parse --abbrev-ref HEAD) git@github.com:imma/$(REBUILD) ../$(REBUILD)
	
rebuild-one: ../$(REBUILD)
	@figlet $(REBUILD) 2>/dev/null || true
	@touch .$(REBUILD).building
	cd ../$(REBUILD) && $(extra) $(make) docker
	@rm -f .$(REBUILD).building

rebuild-all:
	cat compose.json | jq -r '.services | keys[]' | grep -v ubuntu | runmany 4 '$(make) rebuild-one $$1 || true'

local:
	docker images | grep $(hub)/block | awk '{print $$2}' | runmany 'docker tag $(hub)/block:$$1 $(registry)/block:$$1 && docker rmi $(hub)/block:$$1'

download:
	cat compose.json | jq -r '.services | keys[]' | runmany 4 'docker pull $(hub)/block:$$1 && docker tag $(hub)/block:$$1 $(registry)/block:$$1'

upload:
	cat compose.json | jq -r '.services | keys[]' | runmany 4 'docker tag {$(registry),$(hub)}/block:$$1; docker push $(hub)/block:$$1'
