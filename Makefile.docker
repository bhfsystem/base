org := $(shell (cat Blockfile.json 2>/dev/null || echo '{}') | jq -r '.block.org//"imma"')
block := $(shell basename $(shell echo $(PWD)))
image = block:$(block)

ifeq (stop,$(firstword $(MAKECMDGOALS)))
STOP := $(wordlist 2,$(words $(MAKECMDGOALS)),$(MAKECMDGOALS))
$(eval $(STOP):;@:)
endif

ifeq (start,$(firstword $(MAKECMDGOALS)))
START := $(wordlist 2,$(words $(MAKECMDGOALS)),$(MAKECMDGOALS))
$(eval $(START):;@:)
endif

ifeq (status,$(firstword $(MAKECMDGOALS)))
STATUS := $(wordlist 2,$(words $(MAKECMDGOALS)),$(MAKECMDGOALS))
$(eval $(STATUS):;@:)
endif

ifeq (ssh,$(firstword $(MAKECMDGOALS)))
SERVICE := $(wordlist 2,$(words $(MAKECMDGOALS)),$(MAKECMDGOALS))
$(eval $(SERVICE):;@:)
ifeq "$(strip $(SERVICE))" ""
SERVICE := $(block)
endif
endif
SERVICE ?= $(block)

ifeq (cat,$(firstword $(MAKECMDGOALS)))
SERVICE := $(wordlist 2,2,$(MAKECMDGOALS))
FILE := $(wordlist 3,3,$(MAKECMDGOALS))
$(eval $(SERVICE):;@:)
$(eval $(FILE):;@:)
ifeq "$(strip $(SERVICE))" ""
SERVICE := $(block)
endif
endif
SERVICE ?= $(block)

ifeq (remote,$(firstword $(MAKECMDGOALS)))
REMOTE := $(wordlist 2,$(words $(MAKECMDGOALS)),$(MAKECMDGOALS))
$(eval $(REMOTE):;@:)
endif

SHELL = bash
CACHE = http://$(CACHE_VIP):3128
DOCKER = $(CACHE_VIP)

# ssh_prefix = ssh -A defn@172.28.128.1
ssh_user ?= $(LOGNAME)
ssh_port ?= 2222

container = $(block)_block_1
container_ssh_port = $(shell docker inspect $(container) 2>/dev/null | jq -r '.[].NetworkSettings.Ports["$(ssh_port)/tcp"][].HostPort')
container_ssh_exec = $(ssh_prefix) ssh -A -p $(container_ssh_port) ubuntu@localhost

service = $(block)_$(SERVICE)_1
service_ssh_port = $(shell docker inspect $(service) 2>/dev/null | jq -r '.[].NetworkSettings.Ports["$(ssh_port)/tcp"][].HostPort')
service_ssh_exec = $(ssh_prefix) ssh -A -p $(service_ssh_port) ubuntu@localhost

remote_ssh_exec = ssh -A $(REMOTE)

registry ?= $(CACHE_VIP)

docker_compose ?= env BLOCK_REGISTRY=$(registry) BLOCK_SSH_PORT=$(ssh_port) docker-compose -f compose.json

env_cache = env http_proxy=$(CACHE) https_proxy=$(CACHE)
# ^^ ssh_gateway=$(CACHE_VIP) ssh_gateway_user=$(ssh_user)

home = ubuntu-home

nothing:
	@true

reset-xenial:
	docker pull ubuntu:xenial
	docker tag ubuntu:xenial $(CACHE_VIP)/block:xenial
	docker push $(CACHE_VIP)/block:xenial
	docker tag $(DOCKER)/block:xenial $(DOCKER)/$(image)

reset-base:
	docker tag $(DOCKER)/block:base $(DOCKER)/$(image)

reset:
	docker tag $(DOCKER)/block:$(home) $(DOCKER)/$(image)

build:
	if [[ -d .d ]]; then cd .d && docker build -t $(DOCKER)/$(image) --build-arg http_proxy="$(CACHE)" --build-arg SERIAL=$(SERIAL) $(opt) .; fi

build-nc:
	if [[ -d .d ]]; then cd .d && docker build --no-cache -t $(DOCKER)/$(image) --build-arg http_proxy="$(CACHE)" --build-arg SERIAL=$(SERIAL) $(opt) .; fi

commit:
	docker commit $(container) $(DOCKER)/$(image) $(opt)

publish:
	docker push $(DOCKER)/$(image)

daemon:
	$(MAKE) clean
	$(MAKE) daemon-sshd
	$(MAKE) daemon-ssh

daemon-sshd:
	docker run -d -ti -v /vagrant:/vagrant --name $(container) -p :$(ssh_port) $(DOCKER)/$(image)
	docker cp ~/.ssh/authorized_keys $(container):/home/ubuntu/.ssh/authorized_keys
	docker exec $(container) sudo chown ubuntu:ubuntu /home/ubuntu/.ssh/authorized_keys

daemon-ssh:
	$(ssh_prefix) ssh-keygen -R '[localhost]:$(container_ssh_port)' 2>/dev/null
	$(container_ssh_exec) -o StrictHostKeyChecking=no -- true || { sleep 1; $(MAKE) daemon-ssh; }

service-ssh:
	@echo trying $(service_ssh_exec) ...
	@ssh-keygen -R '[localhost]:$(service_ssh_port)' 2>/dev/null
	@$(service_ssh_exec) -o StrictHostKeyChecking=no -- true || { sleep 1; $(MAKE) service-ssh; }

compose:
	jq -n --arg registry "$(CACHE_VIP)" --arg block "$(block)" '{version:"2", volumes:{data:{},config:{}}, services:{"\($$block)":{volumes:["data:/data","config:/config"],ports:["$(ssh_port)"],"image":"\($$registry)/block:\($$block)","hostname":"\($$block)"}}}' > compose.json

up:
	env COMPOSE_PROJECT_NAME="$(block)" $(docker_compose) up -d --remove-orphans
	$(MAKE) service-ssh

down:
	env COMPOSE_PROJECT_NAME="$(block)" $(docker_compose) stop

destroy:
	env COMPOSE_PROJECT_NAME="$(block)" $(docker_compose) down --remove-orphans

credentials:
	$(service_ssh_exec) -- sudo chown ubuntu:ubuntu /config /data
	$(service_ssh_exec) -- mkdir -p /config/aws
	$(service_ssh_exec) -- touch /config/aws/credentials
	$(service_ssh_exec) -- chmod 600 /config/aws/credentials
	imma credentials | $(MAKE) cat $(block) /config/aws/credentials

shell:
	@ssh -t -A -p $(container_ssh_port) ubuntu@localhost

ssh:
	@ssh-keygen -R '[localhost]:$(service_ssh_port)' 2>&1 1>/dev/null
	@@$(service_ssh_exec) -o StrictHostKeyChecking=no -- true 2>&1 >/dev/null
	@ssh -t -A -p $(service_ssh_port) ubuntu@localhost || true

cat:
	@ssh -p $(service_ssh_port) ubuntu@localhost tee $(FILE)

enter:
	docker exec -ti -u ubuntu $(container) bash -il -c 'cd; exec bash -il'

enter-service:
	docker exec -ti -u ubuntu $(service) bash -il -c 'cd; exec bash -il'

home:
	$(MAKE) reset-base daemon home-setup home-deploy
	$(MAKE) image-update
	docker tag $(DOCKER)/$(image) $(DOCKER)/$(image)0

home-setup:
	echo "Host *" | $(container_ssh_exec) -- tee .ssh/config
	echo "StrictHostKeyChecking no" | $(container_ssh_exec) -- tee -a .ssh/config

home-deploy:
	$(container_ssh_exec) -- $(env_cache) git clone $(shell git config --local remote.origin.url) home
	$(container_ssh_exec) -- mv home/.git .
	$(container_ssh_exec) -- rm -rf home
	$(container_ssh_exec) -- git reset --hard
	$(container_ssh_exec) -- $(env_cache) script/cibuild
	$(container_ssh_exec) -- make cache

remote:
	echo "Host *" | $(remote_ssh_exec) -- tee .ssh/config
	echo "StrictHostKeyChecking no" | $(remote_ssh_exec) -- tee -a .ssh/config
	$(remote_ssh_exec) -- git clone $(shell git config --local remote.origin.url) home
	$(remote_ssh_exec) -- mv home/.git .
	$(remote_ssh_exec) -- rm -rf home
	$(remote_ssh_exec) -- git reset --hard
	$(remote_ssh_exec) -- script/cibuild
	$(remote_ssh_exec) -- make cache

docker:
	$(MAKE) reset daemon block-setup block-deploy

block-setup:
	jq -n --arg block $(block) --arg org $(org) '{ require: [ "\($$org)/\($$block)" ], run: { "\($$block)": {} } }' | $(container_ssh_exec) -- tee Blockfile.json.site

block-deploy:
	$(MAKE) image-update

image-update:
	$(MAKE) block-update commit publish
	$(MAKE) build-nc publish
	$(MAKE) clean

block-update:
	$(container_ssh_exec) -- git pull
	$(container_ssh_exec) -- block clone
	$(container_ssh_exec) -- block runmany 8 "'cd \$$1 && pwd && git pull'"
	$(container_ssh_exec) -- block clone
	$(container_ssh_exec) -- block bootstrap
	$(container_ssh_exec) -- make cache
	$(container_ssh_exec) -- rm -f service/$(home)
	$(container_ssh_exec) -- block compile service
	$(container_ssh_exec) -- ln -nfs ../sv/$(block) ../sv/consul-agent service/

prune:
	docker ps -a | grep -v ' Up ' | tail -n +2 | awk '{print $$1}' | xargs -n 1 bash -c 'docker rm -f $$1 2>/dev/null || true' ''
	docker rmi $(shell docker images --filter "dangling=true" -q --no-trunc)

clean:
	docker rm -f $(container) 2>/dev/null || true

stop:
	@docker exec $(container) sv stop ./service/$(STOP)

start:
	@docker exec $(container) sv start ./service/$(START)

status:
	@docker exec $(container) sv status ./service/$(STATUS)

ps:
	@$(docker_compose) ps

SERIAL = $(shell cat .serial)

.serial:
	@echo 1 > .serial

bump: .serial
	@echo $(SERIAL) + 1 | bc > .serial.tmp
	mv .serial.tmp .serial
