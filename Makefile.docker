SHELL = bash
CACHE = http://$(CACHE_VIP):3128
DOCKER = $(CACHE_VIP):5000

image = block:$(shell basename $(shell echo $(PWD)))
container = block-$(shell basename $(shell echo $(PWD)))

reset-base:
	docker tag $(DOCKER)/block:base $(DOCKER)/$(image)

reset:
	docker tag $(DOCKER)/block:ubuntu-home $(DOCKER)/$(image)

build:
	cd .d && docker build -t $(DOCKER)/$(image) --build-arg http_proxy="$(CACHE)" $(opt) .

build-nc:
	cd .d && docker build --no-cache -t $(DOCKER)/$(image) --build-arg http_proxy="$(CACHE)" $(opt) .

sshd:
	docker run -d -ti -v /vagrant:/vagrant --name $(container) -p :22 $(DOCKER)/$(image)
	docker exec -u ubuntu $(container) bash -c "echo $$(head -1 ~/.ssh/authorized_keys) | tee ~/.ssh/authorized_keys"

commit:
	docker commit $(container) $(DOCKER)/$(image) $(opt)

publish:
	docker push $(DOCKER)/$(image)

daemon:
	$(MAKE) clean
	$(MAKE) sshd
	$(MAKE) once || true
	$(MAKE) once || true
	$(MAKE) once

once:
	ssh-keygen -R '[localhost]:$(shell docker inspect $(container) | jq -r '.[].NetworkSettings.Ports["22/tcp"][].HostPort')'
	ssh -A -p $(shell docker inspect $(container) | jq -r '.[].NetworkSettings.Ports["22/tcp"][].HostPort') -o StrictHostKeyChecking=no ubuntu@localhost -- true

home:
	echo "Host *" | ssh -A -p $(shell docker inspect $(container) | jq -r '.[].NetworkSettings.Ports["22/tcp"][].HostPort') ubuntu@localhost -- tee .ssh/config
	echo "StrictHostKeyChecking no" | ssh -A -p $(shell docker inspect $(container) | jq -r '.[].NetworkSettings.Ports["22/tcp"][].HostPort') ubuntu@localhost -- tee -a .ssh/config
	ssh -A -p $(shell docker inspect $(container) | jq -r '.[].NetworkSettings.Ports["22/tcp"][].HostPort') ubuntu@localhost -- env GIT_CACHE=1 http_proxy=$(CACHE) https_proxy=$(CACHE) ssh_gateway=$(CACHE_VIP) ssh_gateway_user=$(LOGNAME) git clone $(shell git config --local remote.origin.url) home
	ssh -A -p $(shell docker inspect $(container) | jq -r '.[].NetworkSettings.Ports["22/tcp"][].HostPort') ubuntu@localhost -- mv home/.git .
	ssh -A -p $(shell docker inspect $(container) | jq -r '.[].NetworkSettings.Ports["22/tcp"][].HostPort') ubuntu@localhost -- rm -rf home
	ssh -A -p $(shell docker inspect $(container) | jq -r '.[].NetworkSettings.Ports["22/tcp"][].HostPort') ubuntu@localhost -- git reset --hard
	ssh -A -p $(shell docker inspect $(container) | jq -r '.[].NetworkSettings.Ports["22/tcp"][].HostPort') ubuntu@localhost -- env GIT_CACHE=1 http_proxy=$(CACHE) https_proxy=$(CACHE) ssh_gateway=$(CACHE_VIP) ssh_gateway_user=$(LOGNAME) script/cibuild
	ssh -A -p $(shell docker inspect $(container) | jq -r '.[].NetworkSettings.Ports["22/tcp"][].HostPort') ubuntu@localhost -- make cache
	docker commit $(container) $(DOCKER)/$(image)0 $(opt)

update:
	ssh -A -p $(shell docker inspect $(container) | jq -r '.[].NetworkSettings.Ports["22/tcp"][].HostPort') ubuntu@localhost -- git pull
	ssh -A -p $(shell docker inspect $(container) | jq -r '.[].NetworkSettings.Ports["22/tcp"][].HostPort') ubuntu@localhost -- block clone
	ssh -A -p $(shell docker inspect $(container) | jq -r '.[].NetworkSettings.Ports["22/tcp"][].HostPort') ubuntu@localhost -- block runmany 8 "'cd \$$1 && pwd && git pull'"
	ssh -A -p $(shell docker inspect $(container) | jq -r '.[].NetworkSettings.Ports["22/tcp"][].HostPort') ubuntu@localhost -- block clone
	ssh -A -p $(shell docker inspect $(container) | jq -r '.[].NetworkSettings.Ports["22/tcp"][].HostPort') ubuntu@localhost -- block bootstrap
	ssh -A -p $(shell docker inspect $(container) | jq -r '.[].NetworkSettings.Ports["22/tcp"][].HostPort') ubuntu@localhost -- make cache

block:
	jq -n --arg block $(shell basename $(shell echo $(PWD))) '{ require: [ $$block ] }' | ssh -A -p $(shell docker inspect $(container) | jq -r '.[].NetworkSettings.Ports["22/tcp"][].HostPort') ubuntu@localhost -- tee Blockfile.json.site

ssh:
	@ssh -t -A -p $(shell docker inspect $(container) | jq -r '.[].NetworkSettings.Ports["22/tcp"][].HostPort') -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no ubuntu@localhost

enter:
	docker exec -ti -u ubuntu $(container) bash -il -c 'cd; exec bash -il'

clean:
	docker rm -f $(container) 2>/dev/null || true

status:
	@docker ps --filter 'name=$(container)'

cave:
	$(MAKE) reset-base home commit build-nc publish
	$(MAKE) daemon status

beast:
	$(MAKE) daemon block update commit build-nc publish
	$(MAKE) daemon status
