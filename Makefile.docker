org := $(shell (cat Blockfile.json 2>/dev/null || echo '{}') | jq -r '.block.org//"imma"')
block := $(shell basename $(shell echo $(PWD)))
image = block:$(block)

ifeq (stop,$(firstword $(MAKECMDGOALS)))
STOP := $(wordlist 2,$(words $(MAKECMDGOALS)),$(MAKECMDGOALS))
$(eval $(STOP):;@:)
endif

ifeq (start,$(firstword $(MAKECMDGOALS)))
START := $(wordlist 2,$(words $(MAKECMDGOALS)),$(MAKECMDGOALS))
$(eval $(START):;@:)
endif

ifeq (status,$(firstword $(MAKECMDGOALS)))
STATUS := $(wordlist 2,$(words $(MAKECMDGOALS)),$(MAKECMDGOALS))
$(eval $(STATUS):;@:)
endif

ifeq (ssh,$(firstword $(MAKECMDGOALS)))
SERVICE := $(strip $(wordlist 2,$(words $(MAKECMDGOALS)),$(MAKECMDGOALS)))
$(eval $(SERVICE):;@:)
endif

ifeq (cat,$(firstword $(MAKECMDGOALS)))
SERVICE := $(strip $(wordlist 2,2,$(MAKECMDGOALS)))
FILE := $(strip $(wordlist 3,3,$(MAKECMDGOALS)))
$(eval $(SERVICE):;@:)
$(eval $(FILE):;@:)
endif

ifeq (remote,$(firstword $(MAKECMDGOALS)))
REMOTE := $(wordlist 2,$(words $(MAKECMDGOALS)),$(MAKECMDGOALS))
$(eval $(REMOTE):;@:)
endif
SERVICE ?= $(block)
ifeq "$(strip $(SERVICE))" ""
SERVICE := $(block)
endif

SHELL = bash

# ssh_prefix = ssh -A defn@172.28.128.1
ssh_user ?= $(LOGNAME)
ssh_port ?= 2222

service = $(block)_$(SERVICE)_1
service_ssh_port = $(shell docker inspect $(service) 2>/dev/null | jq -r '.[].NetworkSettings.Ports["$(ssh_port)/tcp"][].HostPort')
service_ssh_exec = $(ssh_prefix) ssh -A -p $(service_ssh_port) ubuntu@localhost

remote_ssh_exec = ssh -A $(REMOTE)

docker_compose ?= env BLOCK_REGISTRY=$(registry) BLOCK_SSH_PORT=$(ssh_port) docker-compose -f compose.json

env_cache = env http_proxy=$(squid) https_proxy=$(squid)
# ^^ ssh_gateway=$(cache.nih) ssh_gateway_user=$(ssh_user)

home = ubuntu-home

make = $(MAKE) cache=$(cache) squid=$(squid)

registry ?= cache.nih

ifeq (nc,$(firstword $(MAKECMDGOALS)))
cache=
squid=
else
cache ?= $(shell ping -c 1 -t 1 cache.nih | awk '$$1 == "PING" { print $$3 }' | perl -pe 's{[():]}{}g')
squid ?= http://$(cache):3128
endif

nothing:
	@true

nc:
	@true

reset-xenial:
	docker pull ubuntu:xenial
	docker tag ubuntu:xenial $(registry)/block:xenial
	docker tag $(registry)/block:xenial $(registry)/$(image)

reset-base:
	docker tag $(registry)/block:base $(registry)/$(image)

reset:
	docker tag $(registry)/block:$(home) $(registry)/$(image)

build:
	if [[ -d .d ]]; then cd .d && docker build -t $(registry)/$(image) --build-arg CACHE="$(cache)" --build-arg SERIAL=$(SERIAL) $(opt) .; fi

build-nc:
	if [[ -d .d ]]; then cd .d && docker build --no-cache -t $(registry)/$(image) --build-arg CACHE="$(cache)" --build-arg SERIAL=$(SERIAL) $(opt) .; fi

commit:
	docker commit $(service) $(registry)/$(image) $(opt)

publish:
	docker push $(registry)/$(image)

daemon:
	$(make) clean
	$(make) daemon-sshd
	$(make) daemon-ssh

daemon-sshd:
	docker run -d -ti -v /data:/data -v /config:/config --name $(service) -p :$(ssh_port) $(registry)/$(image)
	docker cp ~/.ssh/authorized_keys $(service):/home/ubuntu/.ssh/authorized_keys
	docker exec $(service) sudo chown ubuntu:ubuntu /home/ubuntu/.ssh/authorized_keys

daemon-ssh:
	$(ssh_prefix) ssh-keygen -R '[localhost]:$(service_ssh_port)' 2>/dev/null
	$(service_ssh_exec) -o StrictHostKeyChecking=no -- true || { sleep 1; $(make) daemon-ssh; }

service-ssh:
	@echo trying $(service_ssh_exec) ...
	@ssh-keygen -R '[localhost]:$(service_ssh_port)' 2>/dev/null
	@$(service_ssh_exec) -o StrictHostKeyChecking=no -- true || { sleep 1; $(make) service-ssh; }

compose:
	jq -n --arg registry "$(registry)" --arg block "$(block)" '{version:"2", volumes:{data:{},config:{}}, services:{"\($$block)":{volumes:["data:/data","config:/config"],ports:["$(ssh_port)"],"image":"\($$registry)/block:\($$block)","hostname":"\($$block)"}}}' > compose.json

up:
	env COMPOSE_PROJECT_NAME="$(block)" $(docker_compose) up -d --remove-orphans $(opt)
	$(make) service-ssh

down:
	env COMPOSE_PROJECT_NAME="$(block)" $(docker_compose) stop $(opt)

destroy:
	env COMPOSE_PROJECT_NAME="$(block)" $(docker_compose) down --remove-orphans $(opt)

credentials:
	$(service_ssh_exec) -- mkdir -p /config/aws
	$(service_ssh_exec) -- touch /config/aws/credentials
	$(service_ssh_exec) -- chmod 600 /config/aws/credentials
	imma credentials | $(make) cat $(block) /config/aws/credentials

shell:
	@$(make) daemon
	@$(make) ssh

ssh:
	@ssh-keygen -R '[localhost]:$(service_ssh_port)' 2>&1 1>/dev/null
	@@$(service_ssh_exec) -o StrictHostKeyChecking=no -- true 2>&1 >/dev/null
	@ssh -t -A -p $(service_ssh_port) ubuntu@localhost || true

cat:
	@ssh -p $(service_ssh_port) ubuntu@localhost tee $(FILE)

enter:
	docker exec -ti -u ubuntu $(service) bash -il -c 'cd; exec bash -il'

enter-service:
	docker exec -ti -u ubuntu $(service) bash -il -c 'cd; exec bash -il'

home:
	$(make) reset-base daemon home-setup home-deploy
	$(make) image-update
	docker tag $(registry)/$(image) $(registry)/$(image)0

home-setup:
	echo "Host *" | $(service_ssh_exec) -- tee .ssh/config
	echo "StrictHostKeyChecking no" | $(service_ssh_exec) -- tee -a .ssh/config

home-deploy:
	$(service_ssh_exec) -- $(env_cache) git clone $(shell git config --local remote.origin.url) home
	$(service_ssh_exec) -- mv home/.git .
	$(service_ssh_exec) -- rm -rf home
	$(service_ssh_exec) -- git reset --hard
	$(service_ssh_exec) -- $(env_cache) script/cibuild
	$(service_ssh_exec) -- make cache

remote:
	echo "Host *" | $(remote_ssh_exec) -- tee .ssh/config
	echo "StrictHostKeyChecking no" | $(remote_ssh_exec) -- tee -a .ssh/config
	$(remote_ssh_exec) -- git clone $(shell git config --local remote.origin.url) home
	$(remote_ssh_exec) -- mv home/.git .
	$(remote_ssh_exec) -- rm -rf home
	$(remote_ssh_exec) -- git reset --hard
	$(remote_ssh_exec) -- script/cibuild
	$(remote_ssh_exec) -- make cache

docker_default = docker-block

docker:
	$(make) $(docker_default)

docker-block:
	$(make) reset daemon block-setup block-deploy

block-setup:
	jq -n --arg block $(block) --arg org $(org) '{ require: [ "\($$org)/\($$block)" ], run: { "\($$block)": {} } }' | $(service_ssh_exec) -- tee Blockfile.json.site

block-deploy:
	$(make) image-update

after_block ?= minimize

minimize:
	$(service_ssh_exec) -- rm -rf work/pkgsrc/vendor/pkgsrc

image-update:
	$(make) block-update $(after_block) commit
	$(make) build-nc
	$(make) clean

block-update:
	$(service_ssh_exec) -- git pull
	$(service_ssh_exec) -- block clone
	$(service_ssh_exec) -- cd work/$(block) 2>/dev/null \&\& git checkout $(shell git symbolic-ref HEAD | cut -d/ -f3) || $(service_ssh_exec) -- git checkout $(shell git symbolic-ref HEAD | cut -d/ -f3)
	$(service_ssh_exec) -- block clone
	$(service_ssh_exec) -- block runmany 8 "'cd \$$1 && pwd && git pull'"
	$(service_ssh_exec) -- block clone
	echo "### [ cache = $(cache) ]"
	if test -z "$(cache)"; then $(service_ssh_exec) -- home disable cache; fi
	$(service_ssh_exec) -- block bootstrap
	$(service_ssh_exec) -- make cache
	$(service_ssh_exec) -- rm -f service/$(home)
	$(service_ssh_exec) -- block compile service
	if test -x script/server; then $(service_ssh_exec) -- ln -nfs ../sv/$(block) service/; fi
	if test -z "$(cache)"; then $(service_ssh_exec) -- home enable cache; fi

prune:
	docker ps -a | grep -v ' Up ' | tail -n +2 | awk '{print $$1}' | xargs -n 1 bash -c 'docker rm -f $$1 2>/dev/null || true' ''
	docker rmi $(shell docker images --filter "dangling=true" -q --no-trunc)

clean:
	docker rm -f $(service) 2>/dev/null || true

stop:
	@docker exec $(service) sv stop ./service/$(STOP)

start:
	@docker exec $(service) sv start ./service/$(START)

status:
	@docker exec $(service) sv status ./service/$(STATUS)

ps:
	@$(docker_compose) ps

SERIAL = $(shell cat .serial)

.serial:
	@echo 1 > .serial

bump: .serial
	@echo $(SERIAL) + 1 | bc > .serial.tmp
	mv .serial.tmp .serial

reset-time:
	docker run -it --rm --privileged --pid=host debian nsenter -t 1 -m -u -n -i date -u $(shell date -u +%m%d%H%M%Y)
